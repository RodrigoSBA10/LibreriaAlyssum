package application;

import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.stage.Stage;
import javafx.scene.control.Button;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;

public class EditarLibrosController {

    @FXML
    private Button btnCancelar;
    @FXML
    private Button btnLimpiar;
    @FXML
    private Button btnGuardar;
    @FXML
    private TextField txtAutor;
    @FXML
    private TextField txtEditorial;
    @FXML
    private TextField txtGenero;
    @FXML
    private TextField txtISBN;
    @FXML
    private TextField txtPrecio;
    @FXML
    private TextField txtTitulo;
    @FXML
    private TableView<Libro> jtTablaLibros;

    // Referencia a la lista de libros de la clase principal
    @SuppressWarnings("unused")
	private ObservableList<Libro> listaLibros;
    private Libro libroActual; // Libro que se está editando

    // Método para recibir la lista de libros desde la clase principal
    public void setListaLibros(ObservableList<Libro> listaLibros) {
        this.listaLibros = listaLibros;
    }
    //Método para pasar una referencia de la instancia de TableView
    public void setTableView(TableView<Libro> tableView) {
        this.jtTablaLibros = tableView;
    }
    
    // Método para recibir el libro que se va a editar
    public void setLibro(Libro libro) {
        this.setLibroActual(libro);
        // Cargar los datos del libro en los campos de texto
        txtTitulo.setText(libro.getTitulo());
        txtAutor.setText(libro.getAutor());
        txtISBN.setText(libro.getIsbn());
        txtEditorial.setText(libro.getEditorial());
        txtGenero.setText(libro.getGenero());
        txtPrecio.setText(Double.toString(libro.getPrecio()));
    }

    @FXML
    void Cancelar(ActionEvent event) {
        // Cerrar la ventana
        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        stage.close();
    }

    @FXML
    void LimpiarCampos(ActionEvent event) {
        // Limpiar los campos
        txtTitulo.clear();
        txtAutor.clear();
        txtISBN.clear();
        txtEditorial.clear();
        txtGenero.clear();
        txtPrecio.clear();
    }

    @FXML
    void GuardarCambios(ActionEvent event) {
    	//Si la tabla esta vacia 
        if (jtTablaLibros == null) {
            Alert alerta= new Alert(AlertType.WARNING);
            alerta.setContentText("jtTablaLibros es null.");
            alerta.show();
            return; // Manejo si jtTablaLibros no está inicializado
        }

        // Seleccionar el libro de la tabla
        Libro libroSeleccionado = jtTablaLibros.getSelectionModel().getSelectedItem();
        if (libroSeleccionado == null) {
            Alert alerta = new Alert(AlertType.WARNING);
            alerta.setTitle("Advertencia");
            alerta.setContentText("Por favor, selecciona un libro de la tabla.");
            alerta.show();
            return;
        }

        try {
            // Actualizar datos del libro
            libroSeleccionado.setTitulo(txtTitulo.getText());
            libroSeleccionado.setAutor(txtAutor.getText());
            libroSeleccionado.setIsbn(txtISBN.getText());
            libroSeleccionado.setEditorial(txtEditorial.getText());
            libroSeleccionado.setGenero(txtGenero.getText());

            // Verificar si el campo de precio no está vacío
            String precioTexto = txtPrecio.getText();
            if (!precioTexto.isEmpty()) {
                double precio = Double.parseDouble(precioTexto);
                libroSeleccionado.setPrecio(precio);
            } else {
                // Manejo del caso de precio vacío
                libroSeleccionado.setPrecio(0.0); // O según tu lógica
            }

            // Actualizar la tabla
            jtTablaLibros.refresh();

            // Confirmación de que se han guardado los cambios
            Alert alerta = new Alert(AlertType.INFORMATION);
            alerta.setTitle("Éxito");
            alerta.setContentText("Los cambios se han guardado exitosamente.");
            alerta.show();
            
        } catch (NumberFormatException e) {
            Alert alerta = new Alert(AlertType.ERROR);
            alerta.setTitle("Error");
            alerta.setContentText("Por favor, introduce un precio válido.");
            alerta.show();
        }
    }

	public Libro getLibroActual() {
		return libroActual;
	}

	public void setLibroActual(Libro libroActual) {
		this.libroActual = libroActual;
	}

}
