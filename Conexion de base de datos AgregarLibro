package application;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import conexion.ContectarBD;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

public class AgregarLibrosController {
    @FXML
    private Button btnAgregarLibroA;
    @FXML
    private Button btnCancelarA;
    @FXML
    private ComboBox<String> cbCategoriaA;
    @FXML
    private ComboBox<String> cbGeneroA;
    @FXML
    private TextField txtAnioA;
    @FXML
    private TextField txtAutorA;
    @FXML
    private TextField txtEditorialA;
    @FXML
    private TextField txtISBNA;
    @FXML
    private TextField txtPrecioA;
    @FXML
    private TextField txtTituloA;
    @FXML
    private TextField txtStockA;
    
    //Referencia a la lista de libros de la clase principal
	private ObservableList<Libro> listaLibros;
    // Método para recibir la lista de libros desde la clase principal
    public void setListaLibros(ObservableList<Libro> listaLibros) {
        this.listaLibros = listaLibros;
    }
    ContectarBD con= new ContectarBD();
    //metodo para cargar las categorias de la base de datos
    public ObservableList<String> cargarCategorias() {
        ObservableList<String> categorias = FXCollections.observableArrayList();
        Connection conection = con.ConectarBDOracle();
        
        String sql = "SELECT nombre FROM categoria"; // Consulta para obtener los nombres

        try (PreparedStatement pstmt = conection.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {
            while (rs.next()) {
                categorias.add(rs.getString("nombre")); // Agrega el nombre de la categoría a la lista
            }
        } catch (SQLException e) {
            System.out.println("Error al cargar categorías: " + e.getMessage());
        } finally {
            try {
                if (conection != null && !conection.isClosed()) {
                    conection.close(); // Cierra la conexión
                }
            } catch (SQLException ex) {
                System.out.println("Error al cerrar la conexión: " + ex.getMessage());
            }
        }
        return categorias; // Devuelve la lista de categorías
    }
    //metodo para cargar los generos
    public ObservableList<String> cargarGeneros() {
        ObservableList<String> generos = FXCollections.observableArrayList();
        Connection conection = con.ConectarBDOracle();
        
        String sql = "SELECT nombre FROM genero"; // Consulta para obtener los nombres

        try (PreparedStatement pstmt = conection.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {
            while (rs.next()) {
                generos.add(rs.getString("nombre")); // Agrega el nombre del género a la lista
            }
        } catch (SQLException e) {
            System.out.println("Error al cargar géneros: " + e.getMessage());
        } finally {
            try {
                if (conection != null && !conection.isClosed()) {
                    conection.close(); // Cierra la conexión
                }
            } catch (SQLException ex) {
                System.out.println("Error al cerrar la conexión: " + ex.getMessage());
            }
        }
        return generos; // Devuelve la lista de géneros
    }

    @FXML
    private void initialize() {
        // Cargar categorías y géneros desde la base de datos
        cbCategoriaA.setItems(cargarCategorias()); // Carga las categorías
        cbGeneroA.setItems(cargarGeneros()); // Carga los géneros
        
        // Opcionalmente puedes seleccionar un valor por defecto
        if (!cbCategoriaA.getItems().isEmpty()) {
            cbCategoriaA.getSelectionModel().selectFirst(); // Selecciona la primera categoría
        }
        if (!cbGeneroA.getItems().isEmpty()) {
            cbGeneroA.getSelectionModel().selectFirst(); // Selecciona el primer género
        }
    }
  
    @FXML
    void GuardarNuevoLibro(ActionEvent event) {
    	//conectamos base de datos
    	Connection conection = con.ConectarBDOracle();
    	
    	// Validamos que los campos no estén vacíos
        if (txtTituloA.getText().isEmpty() || txtAutorA.getText().isEmpty() || txtISBNA.getText().isEmpty() ||
            txtEditorialA.getText().isEmpty() || cbCategoriaA.getValue() == null || cbGeneroA.getValue() == null ||
            txtAnioA.getText().isEmpty() || txtPrecioA.getText().isEmpty() || txtStockA.getText().isEmpty()) {
            System.out.println("Por favor, completa todos los campos");
            return;
        }

        // Intentamos convertir los campos numéricos
        try {
            Double.parseDouble(txtPrecioA.getText());
            Integer.parseInt(txtStockA.getText());
        } catch (NumberFormatException e) {
            System.out.println("El precio o el stock no son válidos");
            return;
        }
        
        //Capturamos los datos del formulario
        String titulo = txtTituloA.getText();
        String autor = txtAutorA.getText();
        String isbn = txtISBNA.getText();
        String editorial = txtEditorialA.getText(); 
        String categoriaSeleccionada= cbCategoriaA.getValue();
        String generoSeleccionado= cbGeneroA.getValue();
        String anio= txtAnioA.getText();
        Double precio = Double.parseDouble(txtPrecioA.getText());
        int stock = Integer.parseInt(txtStockA.getText());
        //Sentencia sql para insertar los datos
        String sql = "INSERT INTO libro (id, titulo, autor, isbn, editorial, categoria, genero, anio, precio, stock) VALUES (seq_libro.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        //recoremos la base de datos agregando los valores correspondientes
        try (Connection conn = conection;
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, titulo);
            pstmt.setString(2, autor);
            pstmt.setString(3, isbn);
            pstmt.setString(4, editorial);
            pstmt.setString(5, categoriaSeleccionada);
            pstmt.setString(6, generoSeleccionado);
            pstmt.setString(7, anio);
            pstmt.setDouble(8, precio);
            pstmt.setInt(9, stock);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        //Creamos un nuevo libro y guardamos los valores
       Libro libro = new Libro(titulo, autor, isbn, editorial, categoriaSeleccionada, generoSeleccionado, anio, precio, stock);

        //Agregamos el libro a la lista
        listaLibros.add(libro);

        //Limpiamos los campos para un nuevo registro
        txtTituloA.clear();
        txtAutorA.clear();
        txtISBNA.clear();
        txtEditorialA.clear();
        cbCategoriaA.setValue(null);
        cbGeneroA.setValue(null);
        txtPrecioA.clear();
        txtStockA.clear();

        //Cerramos la ventana
        Stage stage = (Stage) txtTituloA.getScene().getWindow();
        stage.close();
    }
    
    @FXML
    private void cancelar(ActionEvent event) {
        // Cerrar la ventana
        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        stage.close();
    }
}
